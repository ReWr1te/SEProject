#include<stdio.h>
#include<math.h>

struct Box
{
	float x1 = -1.0;
	float x2 = 1.0;
	float y1 = -1.0;
	float y2 = 1.0;
}box;

float findMaxIn5(int m);

int main()
{
	printf("%f", findMaxIn5(5));
	getchar();
	return 0;
}

float findMaxIn5(int m)
{
	float rSmall = (sqrt(2)-1)/(sqrt(2)+1);
	return box.x1*box.x1 + (m-1)*rSmall*rSmall;
}

//better codes:
/*
Main Algorithm/Strategy：
1.Limit the range to find the best solution（to limit the
accuracy of the position of the circle's center and the radius）；
2.Using linked list to store the balloons to compare；
3.According to github；
*/

#include <stdlib.h> 
#include <stdio.h>
#include <math.h>

//structure of balloons
typedef struct ball
{
	double x;       //position x of the radius
	double y;	//position y of the radius
	double r;	//radius
}Ball;

//the linked list to store the balloons
typedef struct ballList
{
	struct ballList * next;      //to next balloon
	Ball ball;		     //the balloon
}BallList;

//functions
void insert(Ball ball);			//insert new balloon
double distance(Ball b1, Ball b2);      //judge the distance
double abs(double num);			//get absolute value
int judge(Ball b);			//judge the rationality
void putBall();				//change the beginning position

//parameters
BallList *head = NULL;
double step = 0.01;			//smallest unit to change the position
int num = 0;                            //number of balloons
double sumr = 0;			//sum of r^2

int main()
{
	int n, pointNum, i;
	printf("Number of balloons: ");
	scanf_s("%d", &n);
	printf("\nNo.\t x\t y\t radius\t sum of r^2\n");
	for (i = 0; i < n; i++)
	{
		putBall();
	}
	printf("\nsum of r^2:\t %lf\n", sumr);
	system("pause");
	return 0;
}

void insert(Ball ball)
{
	ballList * newBall = (ballList *)malloc(sizeof(ballList));
	newBall->ball = ball;
	newBall->next = head;
	head = newBall;
}

void putBall()
{
	Ball ball = { -1 + step, -1 + step, 0 };
	Ball maxBall = ball;
	int i, j;
	for (i = 0; ball.x < 1; ++i)
	{
		ball.x += step;
		ball.y = -1 + step;
		for (j = 0; ball.y < 1; ++j)
		{
			ball.y += step;
			ball.r = 0;
			double rstep = 0.1;
			while (rstep > 0.00001)
			{
				if (ball.r > maxBall.r)
				{
					maxBall = ball;
				}
				ball.r += rstep;
				if (!judge(ball))
				{
					ball.r -= rstep;
					rstep /= 10;
				}
			}
		}
	}
	if (judge(maxBall))
	{
		insert(maxBall);
		num++;
		sumr += maxBall.r * maxBall.r;
		printf("%d\t %.3lf\t %.3lf\t %.3lf\t %lf \n", num, maxBall.x, maxBall.y, maxBall.r, sumr);
	}
}

int judge(Ball b)
{
	if ((abs(b.x) + b.r) > 1 || (abs(b.y) + b.r) > 1)
	{
		return false;
	}
	ballList *tmp = head;
	while (tmp)
	{
		Ball ball = tmp->ball;
		if (distance(b, ball) < b.r + ball.r)
		{
			return false;
		}
		tmp = tmp->next;
	}
	return true;
}

double abs(double num)
{
	if (num > 0)
		return num;
	return 0 - num;
}

double distance(Ball b1, Ball b2)
{
	double x1 = b1.x;
	double y1 = b1.y;
	double x2 = b2.x;
	double y2 = b2.y;
	return pow((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2), 0.5);
}
